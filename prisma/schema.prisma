// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  MODERATEUR
  USER
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  password      String?
  email         String        @unique
  emailVerified DateTime?     @map("email_verified")
  image         String
  customImage   Image?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  adress        Adress[]
  mainAdressId  Int?           @map("main_adress_id")
  messageFrom   MessageFrom[]
  messageTo     MessageTo[]
  property      Property[]
  historical    Historique[]
  commentary    Commentary[]
  vote          Vote[]

  @@map(name: "users")
}

model Message {
  id         Int         @id @default(autoincrement())
  content    String
  from       MessageFrom @relation(fields: [fromId], references: [id])
  fromId     Int         @map("from_id")
  to         MessageTo   @relation(fields: [toId], references: [id])
  toId       Int         @map("to_id")
  createdAt  DateTime    @default(now()) @map("created_at")
  asBeenRead Boolean     @default(false) @map("as_been_read")

  @@map(name: "messages")
}

model MessageFrom {
  id      Int       @id @default(autoincrement())
  user    User      @relation(fields: [userId], references: [id])
  userId  Int       @map("user_id")
  message Message[]

  @@map("message_from")
}

model MessageTo {
  id      Int       @id @default(autoincrement())
  user    User      @relation(fields: [userId], references: [id])
  userId  Int       @map("user_id")
  message Message[]

  @@map("message_to")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @unique @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Image {
  id                Int       @id @default(autoincrement())
  publicID          String    @unique
  uri               String    @unique
  alt               String
  property          Property? @relation(fields: [propertyId], references: [id])
  propertyId        Int?      @map("property_id")
  user              User?     @relation(fields: [userId], references: [id])
  userId            Int?      @map("user_id")
  propertyType      PropertyType? @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId    Int?          @map("property_type_id")
  equipementType    EquipementType? @relation(fields: [equipementTypeId], references: [id])
  equipementTypeId  Int?          @map("equipement_type_id")

  @@map("images")
}

model Property {
  id                Int           @id @default(autoincrement())
  name              String
  description       String
  images            Image[]
  equipments        Json
  equipementType    EquipementType[]
  propertyType      PropertyType  @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId    Int           @map("property_type_id")
  user              User          @relation(fields: [userId], references: [id])
  userId            Int           @map("user_id")
  adress            Adress        @relation(fields: [adressId], references: [id])
  adressId          Int           @map("adress_id")
  vote              Vote[]
  rate              Int
  price             Int
  createdAt         DateTime      @default(now()) @map("created_at")
  commentary        Commentary[]
  historical        Historique[]

  @@map(name: "properties")
}

model EquipementType {
  id    Int    @id @default(autoincrement())
  label String
  image Image[]
  properties Property[]

  @@map(name: "equipement_types")
}

model PropertyType {
  id          Int        @id @default(autoincrement())
  type        String
  image       Image[]
  description String
  properties Property[]

  @@map("property_types")
}

model Commentary {
  id           Int        @id @default(autoincrement())
  property     Property   @relation(fields: [propertyId], references: [id])
  propertyId   Int        @map("property_id")
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @map("user_id")
  historical   Historique @relation(fields: [historicalId], references: [id])
  historicalId Int        @unique @map("historical_id")
  content      String
  createdAt    DateTime   @default(now()) @map("created_at")

  @@map("Commentaries")
}

model Vote {
  id           Int        @id @default(autoincrement())
  property     Property   @relation(fields: [propertyId], references: [id])
  propertyId   Int        @map("property_id")
  historical   Historique @relation(fields: [historicalId], references: [id])
  historicalId Int        @unique @map("historical_id")
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @map("user_id")
  rate         Int

  @@map("votes")
}

model Historique {
  id         Int           @id @default(autoincrement())
  user       User          @relation(fields: [userId], references: [id])
  userId     Int           @map("user_id")
  property   Property      @relation(fields: [propertyId], references: [id])
  propertyId Int           @map("property_id")
  dateStart  DateTime      @map("date_start")
  dateEnd    DateTime      @map("date_end")
  price      Int
  vote       Vote[]
  commentary Commentary[]

  @@map(name: "historiques")
}

model Adress {
  id         Int       @id @default(autoincrement())
  street     String
  city       String
  ZIPCode    Int       @map("ZIP_code")
  country    String
  additional String?
  property   Property?
  user       User      @relation(fields: [userId], references: [id])
  userId     Int       @map("user_id")

  @@map(name: "adresses")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Newsletter {
  id         Int      @id @default(autoincrement())
  mail       String
  active     Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
